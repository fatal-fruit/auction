syntax = "proto3";
package fatal_fruit.auction.v1;

option go_package = "github.com/fatal-fruit/auction/types";

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos_proto/cosmos.proto";
import "fatal_fruit/auction/v1/types.proto";
import "google/protobuf/any.proto";

// Service Query provides methods for querying auction data.
service Query {
  // Auction retrieves the details of an auction by its ID.
  rpc Auction(QueryAuctionRequest) returns (QueryAuctionResponse) {
    option (google.api.http).get = "/cosmos/auction/auction/{id}";
  }

  // OwnerAuctions retrieves all auctions owned by an address.
  rpc OwnerAuctions(QueryOwnerAuctionsRequest) returns (QueryOwnerAuctionsResponse){
    option (google.api.http).get = "/cosmos/auction/owner/{owner_address}/auctions";
  }


  // AllAuctions retrieves a paginated list of all auctions.
  rpc AllAuctions(QueryAllAuctionsRequest) returns (QueryAllAuctionsResponse) {
    option (google.api.http).get = "/cosmos/auction/auctions";
  }
}

// QueryAuctionRequest is the response type for the Query/Names RPC method
message QueryAuctionRequest { uint64 id = 1; }

// QueryAuctionResponse is the request type for the Query/Names RPC method
message QueryAuctionResponse {
  google.protobuf.Any auction = 1 [(cosmos_proto.accepts_interface) = "fatal_fruit.auction.v1.Auction"];
}

// QueryOwnerAuctionsRequest is the request type for querying auctions by an owner's address.
message QueryOwnerAuctionsRequest {
  string owner_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}

// QueryOwnerAuctionsResponse is the response type for the Query/OwnerAuctions RPC method.
message QueryOwnerAuctionsResponse { repeated ReserveAuction auctions = 1; }

message QueryAllAuctionsRequest {}

message QueryAllAuctionsResponse { repeated ReserveAuction auctions = 1; }
