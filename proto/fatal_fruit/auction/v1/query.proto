syntax = "proto3";
package fatal_fruit.auction.v1;

option go_package = "github.com/fatal-fruit/auction/types";

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "cosmos/query/v1/query.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "fatal_fruit/auction/v1/types.proto";

// Auction retrieves the details of a specific auction by its ID.
service Query {
  rpc Auction(QueryAuctionRequest) returns (QueryAuctionResponse) {
    option (google.api.http).get = "/cosmos/auction/auction/{id}";
  }

  // OwnerAuctions retrieves all auctions owned by an address.
  rpc OwnerAuctions(QueryOwnerAuctionsRequest) returns (QueryOwnerAuctionsResponse){
    option (google.api.http).get = "/cosmos/auction/owner/{owner_address}/auctions";
  }

  // GetAllAuctions retrieves all auctions.
  rpc GetAllAuctions(QueryAllAuctionsRequest) returns (QueryAllAuctionsResponse) {
    option (google.api.http).get = "/cosmos/auction/auctions";
  }
}

// QueryAuctionRequest is the response type for the Query/Names RPC method
message QueryAuctionRequest { uint64 id = 1; }

// QueryAuctionResponse is the request type for the Query/Names RPC method
message QueryAuctionResponse { ReserveAuction auction = 1; }

message QueryOwnerAuctionsRequest {
  string owner_address = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
}
message QueryOwnerAuctionsResponse { repeated ReserveAuction auctions = 1; }

message QueryAllAuctionsRequest {}

message QueryAllAuctionsResponse { repeated ReserveAuction auctions = 1; }