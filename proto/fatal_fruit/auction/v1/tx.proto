syntax = "proto3";
package fatal_fruit.auction.v1;

option go_package = "github.com/fatal-fruit/auction/types";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "amino/amino.proto";
import "fatal_fruit/auction/v1/types.proto";
import "cosmos_proto/cosmos.proto";

service Msg {
  option (cosmos.msg.v1.service) = true;

rpc CreateAuction(MsgCreateAuction) returns (MsgCreateAuctionResponse);

}

message MsgCreateAuction {
  option (cosmos.msg.v1.signer) = "owner";

  // name defines the human readable address
  string name = 1;

  // owner is the address of the owner of auction 
  string auctioneer = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  //   price is the last price paid for listing
  repeated cosmos.base.v1beta1.Coin amount = 3 [
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  //   duration is the duration of the auction
   google.protobuf.Timestamp duration = 4
      [(gogoproto.stdtime) = true, (gogoproto.nullable) = false, (amino.dont_omitempty) = true];
}

message MsgCreateAuctionResponse {
  
}