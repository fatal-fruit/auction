syntax = "proto3";
package fatal_fruit.auction.v1;

option go_package = "github.com/fatal-fruit/auction/types";

import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "amino/amino.proto";
import "fatal_fruit/auction/v1/types.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/duration.proto";


service Msg {
  option (cosmos.msg.v1.service) = true;

  rpc NewAuction(MsgNewAuction) returns (MsgNewAuctionResponse);

  rpc NewBid(MsgNewBid) returns (MsgNewBidResponse);
}

message MsgNewAuction {
  option (cosmos.msg.v1.signer) = "owner";

  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  repeated cosmos.base.v1beta1.Coin deposit = 2 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  cosmos.base.v1beta1.Coin reserve_price = 3 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  // expiration specifies an optional time when this allowance expires
  google.protobuf.Duration duration = 4
  [(gogoproto.stdduration) = true, (gogoproto.nullable) = false, (amino.dont_omitempty) = true];

  string auction_type = 5;
}

message MsgNewAuctionResponse{
  uint64 id = 1;
}

message MsgNewBid {
  option (cosmos.msg.v1.signer) = "owner";

  string owner = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];

  uint64 auction_id = 2;

  cosmos.base.v1beta1.Coin bid = 3 [
    (gogoproto.nullable)     = false,
    (amino.dont_omitempty)   = true,
    (amino.encoding)         = "legacy_coins",
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message MsgNewBidResponse{}