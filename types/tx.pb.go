// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fatal_fruit/auction/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgNewAuction represents a request to create a new auction.
type MsgNewAuction struct {
	// owner is the address of the auction creator.
	Owner       string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	AuctionType string `protobuf:"bytes,2,opt,name=auction_type,json=auctionType,proto3" json:"auction_type,omitempty"`
	// deposit is the initial deposit amount for the auction.
	Deposit         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=deposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"deposit"`
	AuctionMetadata *types1.Any                              `protobuf:"bytes,4,opt,name=auction_metadata,json=auctionMetadata,proto3" json:"auction_metadata,omitempty"`
}

func (m *MsgNewAuction) Reset()         { *m = MsgNewAuction{} }
func (m *MsgNewAuction) String() string { return proto.CompactTextString(m) }
func (*MsgNewAuction) ProtoMessage()    {}
func (*MsgNewAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{0}
}
func (m *MsgNewAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewAuction.Merge(m, src)
}
func (m *MsgNewAuction) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewAuction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewAuction proto.InternalMessageInfo

func (m *MsgNewAuction) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgNewAuction) GetAuctionType() string {
	if m != nil {
		return m.AuctionType
	}
	return ""
}

func (m *MsgNewAuction) GetDeposit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *MsgNewAuction) GetAuctionMetadata() *types1.Any {
	if m != nil {
		return m.AuctionMetadata
	}
	return nil
}

// MsgNewAuctionResponse defines the response for a successful auction creation.
type MsgNewAuctionResponse struct {
	// id is the unique identifier of the created auction.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgNewAuctionResponse) Reset()         { *m = MsgNewAuctionResponse{} }
func (m *MsgNewAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewAuctionResponse) ProtoMessage()    {}
func (*MsgNewAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{1}
}
func (m *MsgNewAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewAuctionResponse.Merge(m, src)
}
func (m *MsgNewAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewAuctionResponse proto.InternalMessageInfo

func (m *MsgNewAuctionResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgStartAuction struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Id    uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgStartAuction) Reset()         { *m = MsgStartAuction{} }
func (m *MsgStartAuction) String() string { return proto.CompactTextString(m) }
func (*MsgStartAuction) ProtoMessage()    {}
func (*MsgStartAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{2}
}
func (m *MsgStartAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartAuction.Merge(m, src)
}
func (m *MsgStartAuction) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartAuction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartAuction proto.InternalMessageInfo

func (m *MsgStartAuction) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgStartAuction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgStartAuctionResponse struct {
}

func (m *MsgStartAuctionResponse) Reset()         { *m = MsgStartAuctionResponse{} }
func (m *MsgStartAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartAuctionResponse) ProtoMessage()    {}
func (*MsgStartAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{3}
}
func (m *MsgStartAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartAuctionResponse.Merge(m, src)
}
func (m *MsgStartAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartAuctionResponse proto.InternalMessageInfo

// MsgCancelAuction represents a request to cancel an auction.
type MsgCancelAuction struct {
	// sender is the address of the request initiator.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// auction_id is the unique identifier of the auction to cancel.
	AuctionId uint64 `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (m *MsgCancelAuction) Reset()         { *m = MsgCancelAuction{} }
func (m *MsgCancelAuction) String() string { return proto.CompactTextString(m) }
func (*MsgCancelAuction) ProtoMessage()    {}
func (*MsgCancelAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{4}
}
func (m *MsgCancelAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelAuction.Merge(m, src)
}
func (m *MsgCancelAuction) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelAuction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelAuction proto.InternalMessageInfo

func (m *MsgCancelAuction) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgCancelAuction) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

// MsgCancelAuctionResponse defines the response for a successful auction cancellation.
type MsgCancelAuctionResponse struct {
}

func (m *MsgCancelAuctionResponse) Reset()         { *m = MsgCancelAuctionResponse{} }
func (m *MsgCancelAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCancelAuctionResponse) ProtoMessage()    {}
func (*MsgCancelAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{5}
}
func (m *MsgCancelAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCancelAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCancelAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCancelAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCancelAuctionResponse.Merge(m, src)
}
func (m *MsgCancelAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCancelAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCancelAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCancelAuctionResponse proto.InternalMessageInfo

// MsgNewBid represents a request to place a bid on an auction.
type MsgNewBid struct {
	// owner is the address of the bidder.
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	// auction_id is the unique identifier of the auction to bid on.
	AuctionId uint64 `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	// bid is the amount of the bid.
	BidAmount types.Coin  `protobuf:"bytes,3,opt,name=bid_amount,json=bidAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"bid_amount"`
	Data      *types1.Any `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *MsgNewBid) Reset()         { *m = MsgNewBid{} }
func (m *MsgNewBid) String() string { return proto.CompactTextString(m) }
func (*MsgNewBid) ProtoMessage()    {}
func (*MsgNewBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{6}
}
func (m *MsgNewBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBid.Merge(m, src)
}
func (m *MsgNewBid) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBid proto.InternalMessageInfo

func (m *MsgNewBid) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgNewBid) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *MsgNewBid) GetBidAmount() types.Coin {
	if m != nil {
		return m.BidAmount
	}
	return types.Coin{}
}

func (m *MsgNewBid) GetData() *types1.Any {
	if m != nil {
		return m.Data
	}
	return nil
}

// MsgNewBidResponse defines the response for a successful bid placement.
type MsgNewBidResponse struct {
}

func (m *MsgNewBidResponse) Reset()         { *m = MsgNewBidResponse{} }
func (m *MsgNewBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewBidResponse) ProtoMessage()    {}
func (*MsgNewBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{7}
}
func (m *MsgNewBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBidResponse.Merge(m, src)
}
func (m *MsgNewBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBidResponse proto.InternalMessageInfo

// MsgExecAuction represents a request to execute an auction.
type MsgExecAuction struct {
	// sender is the address of the request initiator.
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// auction_id is the unique identifier of the auction to execute.
	AuctionId uint64 `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (m *MsgExecAuction) Reset()         { *m = MsgExecAuction{} }
func (m *MsgExecAuction) String() string { return proto.CompactTextString(m) }
func (*MsgExecAuction) ProtoMessage()    {}
func (*MsgExecAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{8}
}
func (m *MsgExecAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecAuction.Merge(m, src)
}
func (m *MsgExecAuction) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecAuction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecAuction proto.InternalMessageInfo

func (m *MsgExecAuction) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgExecAuction) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

// MsgExecAuctionResponse defines the response for a successful auction execution.
type MsgExecAuctionResponse struct {
}

func (m *MsgExecAuctionResponse) Reset()         { *m = MsgExecAuctionResponse{} }
func (m *MsgExecAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecAuctionResponse) ProtoMessage()    {}
func (*MsgExecAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{9}
}
func (m *MsgExecAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecAuctionResponse.Merge(m, src)
}
func (m *MsgExecAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecAuctionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNewAuction)(nil), "fatal_fruit.auction.v1.MsgNewAuction")
	proto.RegisterType((*MsgNewAuctionResponse)(nil), "fatal_fruit.auction.v1.MsgNewAuctionResponse")
	proto.RegisterType((*MsgStartAuction)(nil), "fatal_fruit.auction.v1.MsgStartAuction")
	proto.RegisterType((*MsgStartAuctionResponse)(nil), "fatal_fruit.auction.v1.MsgStartAuctionResponse")
	proto.RegisterType((*MsgCancelAuction)(nil), "fatal_fruit.auction.v1.MsgCancelAuction")
	proto.RegisterType((*MsgCancelAuctionResponse)(nil), "fatal_fruit.auction.v1.MsgCancelAuctionResponse")
	proto.RegisterType((*MsgNewBid)(nil), "fatal_fruit.auction.v1.MsgNewBid")
	proto.RegisterType((*MsgNewBidResponse)(nil), "fatal_fruit.auction.v1.MsgNewBidResponse")
	proto.RegisterType((*MsgExecAuction)(nil), "fatal_fruit.auction.v1.MsgExecAuction")
	proto.RegisterType((*MsgExecAuctionResponse)(nil), "fatal_fruit.auction.v1.MsgExecAuctionResponse")
}

func init() { proto.RegisterFile("fatal_fruit/auction/v1/tx.proto", fileDescriptor_885159ca31442fc0) }

var fileDescriptor_885159ca31442fc0 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0x4f, 0x4f, 0x13, 0x4d,
	0x1c, 0xee, 0xb6, 0x85, 0x37, 0xfd, 0x95, 0x97, 0x3f, 0xfb, 0xf2, 0x42, 0xd9, 0xc4, 0x02, 0x8d,
	0x42, 0x6d, 0xd2, 0x59, 0x8b, 0x37, 0x0e, 0x26, 0x2d, 0xd1, 0xc4, 0x43, 0x8d, 0x29, 0xc6, 0x83,
	0x89, 0x36, 0xb3, 0x9d, 0x61, 0x98, 0xd0, 0xee, 0x34, 0x3b, 0x5b, 0xa0, 0xf1, 0x42, 0xfc, 0x04,
	0xc6, 0xa3, 0x9f, 0xc0, 0x78, 0xe2, 0xc0, 0xcd, 0x2f, 0x40, 0x38, 0x11, 0x4f, 0x9c, 0xd4, 0xc0,
	0x81, 0xaf, 0x61, 0x76, 0x77, 0x76, 0xd3, 0x45, 0x29, 0xd5, 0x03, 0x97, 0x76, 0xf7, 0x37, 0xcf,
	0xef, 0xf7, 0x3c, 0xf3, 0xcc, 0x33, 0x2d, 0x2c, 0x6e, 0x61, 0x17, 0xb7, 0x9b, 0x5b, 0x4e, 0x8f,
	0xbb, 0x26, 0xee, 0xb5, 0x5c, 0x2e, 0x6c, 0x73, 0xb7, 0x62, 0xba, 0xfb, 0xa8, 0xeb, 0x08, 0x57,
	0xe8, 0x73, 0x03, 0x00, 0xa4, 0x00, 0x68, 0xb7, 0x62, 0xcc, 0xb7, 0x84, 0xec, 0x08, 0x69, 0x76,
	0x24, 0xf3, 0xf0, 0x1d, 0xc9, 0x82, 0x06, 0x63, 0x96, 0x09, 0x26, 0xfc, 0x47, 0xd3, 0x7b, 0x52,
	0xd5, 0xbc, 0x82, 0x5b, 0x58, 0x52, 0x73, 0xb7, 0x62, 0x51, 0x17, 0x57, 0xcc, 0x96, 0xe0, 0xb6,
	0x5a, 0x9f, 0xc1, 0x1d, 0x6e, 0x0b, 0xd3, 0xff, 0x54, 0xa5, 0xc2, 0x75, 0xd2, 0xfa, 0x5d, 0x2a,
	0x15, 0x66, 0x21, 0x18, 0xdb, 0x0c, 0xf8, 0x82, 0x97, 0x70, 0x89, 0x09, 0xc1, 0xda, 0xd4, 0xf4,
	0xdf, 0xac, 0xde, 0x96, 0x89, 0xed, 0x7e, 0x28, 0xe6, 0xea, 0x12, 0xe9, 0x39, 0xd8, 0xdf, 0x98,
	0x5f, 0x29, 0x9c, 0x25, 0xe1, 0xdf, 0xba, 0x64, 0xcf, 0xe8, 0x5e, 0x35, 0xa0, 0xd5, 0x11, 0x8c,
	0x89, 0x3d, 0x9b, 0x3a, 0x39, 0x6d, 0x49, 0x2b, 0x66, 0x6a, 0xb9, 0xaf, 0x47, 0xe5, 0x59, 0xc5,
	0x56, 0x25, 0xc4, 0xa1, 0x52, 0x6e, 0xba, 0x0e, 0xb7, 0x59, 0x23, 0x80, 0xe9, 0xcb, 0x30, 0xa1,
	0x14, 0x37, 0x3d, 0xb9, 0xb9, 0xa4, 0xd7, 0xd6, 0xc8, 0xaa, 0xda, 0x8b, 0x7e, 0x97, 0xea, 0x6f,
	0xe1, 0x1f, 0x42, 0xbb, 0x42, 0x72, 0x37, 0x97, 0x5a, 0x4a, 0x15, 0xb3, 0x6b, 0x0b, 0x48, 0x4d,
	0xf4, 0x3c, 0x42, 0xca, 0x23, 0xb4, 0x21, 0xb8, 0x5d, 0x7b, 0x72, 0xfc, 0x6d, 0x31, 0xf1, 0xf9,
	0xfb, 0x62, 0x91, 0x71, 0x77, 0xbb, 0x67, 0xa1, 0x96, 0xe8, 0xa8, 0xcd, 0xaa, 0xaf, 0xb2, 0x24,
	0x3b, 0xca, 0x18, 0xaf, 0x41, 0x7e, 0xbc, 0x3c, 0x2c, 0x4d, 0xb4, 0x29, 0xc3, 0xad, 0x7e, 0xd3,
	0x73, 0x59, 0x7e, 0xba, 0x3c, 0x2c, 0x69, 0x8d, 0x90, 0x51, 0xdf, 0x81, 0xe9, 0x50, 0x5f, 0x87,
	0xba, 0x98, 0x60, 0x17, 0xe7, 0xd2, 0x4b, 0x5a, 0x31, 0xbb, 0x36, 0x8b, 0x02, 0x73, 0x50, 0x68,
	0x0e, 0xaa, 0xda, 0xfd, 0x5a, 0xe9, 0xe4, 0xa8, 0xbc, 0xf2, 0xfb, 0x24, 0x20, 0xe5, 0x51, 0x5d,
	0xcd, 0x69, 0x4c, 0xe1, 0x78, 0x61, 0x1d, 0xde, 0x5d, 0x1e, 0x96, 0x02, 0x63, 0x0a, 0xab, 0xf0,
	0x7f, 0xcc, 0xd9, 0x06, 0x95, 0x5d, 0x61, 0x4b, 0xaa, 0x4f, 0x42, 0x92, 0x13, 0xdf, 0xde, 0x74,
	0x23, 0xc9, 0x49, 0xe1, 0x35, 0x4c, 0xd5, 0x25, 0xdb, 0x74, 0xb1, 0xe3, 0xfe, 0xed, 0x21, 0x04,
	0x23, 0x93, 0xe1, 0xc8, 0x98, 0x8e, 0x05, 0x98, 0xbf, 0x32, 0x3e, 0x54, 0x52, 0xe8, 0xc2, 0x74,
	0x5d, 0xb2, 0x0d, 0x6c, 0xb7, 0x68, 0x3b, 0xa4, 0x7e, 0x00, 0xe3, 0x92, 0xda, 0x64, 0x04, 0x6e,
	0x85, 0xd3, 0xef, 0x00, 0x84, 0x0e, 0x47, 0x22, 0x32, 0xaa, 0xf2, 0x94, 0xac, 0x67, 0x3d, 0x2d,
	0x0a, 0x5b, 0x30, 0x20, 0x77, 0x95, 0x31, 0x52, 0xf3, 0x25, 0x09, 0x99, 0xc0, 0xb1, 0x1a, 0x27,
	0x7f, 0x6c, 0xc1, 0x70, 0x15, 0xfa, 0x81, 0x06, 0x60, 0x71, 0xd2, 0xc4, 0x1d, 0xd1, 0xb3, 0xbd,
	0x1c, 0x6a, 0xb7, 0x93, 0xc3, 0x8c, 0xc5, 0x49, 0xd5, 0xe7, 0xd4, 0x9f, 0x43, 0xfa, 0xc6, 0xf4,
	0xad, 0x9c, 0x1c, 0x95, 0x0b, 0xd7, 0xa4, 0xaf, 0xc6, 0x49, 0x94, 0xbc, 0xf4, 0x2f, 0x71, 0xfb,
	0x0f, 0x66, 0x22, 0xf3, 0x22, 0x4b, 0x6d, 0x98, 0xac, 0x4b, 0xf6, 0x78, 0x9f, 0xb6, 0x6e, 0xe7,
	0x78, 0x73, 0x30, 0x17, 0xe7, 0x0b, 0x95, 0xac, 0x7d, 0x48, 0x41, 0xaa, 0x2e, 0x99, 0x6e, 0x01,
	0x0c, 0xfc, 0xd8, 0xdc, 0x43, 0xd7, 0xec, 0x35, 0x76, 0x73, 0x8c, 0xf2, 0x48, 0xb0, 0xe8, 0x82,
	0x6d, 0xc3, 0x44, 0xec, 0x36, 0xad, 0x0e, 0x69, 0x1f, 0x04, 0x1a, 0xe6, 0x88, 0xc0, 0x88, 0xe9,
	0x25, 0x8c, 0xab, 0xb8, 0x2e, 0x0f, 0x97, 0x58, 0xe3, 0xc4, 0xb8, 0x7f, 0x23, 0x24, 0x9a, 0xfb,
	0x06, 0xd2, 0x9e, 0x89, 0xfa, 0xca, 0x90, 0x96, 0x01, 0x97, 0x0d, 0x34, 0x1a, 0x2e, 0x9c, 0x6f,
	0x8c, 0x1d, 0x78, 0xe1, 0xac, 0x3d, 0x3a, 0x3e, 0xcf, 0x6b, 0xa7, 0xe7, 0x79, 0xed, 0xc7, 0x79,
	0x5e, 0x7b, 0x7f, 0x91, 0x4f, 0x9c, 0x5e, 0xe4, 0x13, 0x67, 0x17, 0xf9, 0xc4, 0xab, 0xbb, 0x03,
	0xb1, 0xf7, 0x47, 0x97, 0xe3, 0x7f, 0x4e, 0x7e, 0xf0, 0xad, 0x71, 0x3f, 0xbb, 0x0f, 0x7f, 0x06,
	0x00, 0x00, 0xff, 0xff, 0x12, 0xed, 0x9c, 0x1d, 0x5b, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// NewAuction creates a new auction.
	NewAuction(ctx context.Context, in *MsgNewAuction, opts ...grpc.CallOption) (*MsgNewAuctionResponse, error)
	// StartAuction initializes the auction
	StartAuction(ctx context.Context, in *MsgStartAuction, opts ...grpc.CallOption) (*MsgStartAuctionResponse, error)
	// NewBid places a new bid on an auction.
	NewBid(ctx context.Context, in *MsgNewBid, opts ...grpc.CallOption) (*MsgNewBidResponse, error)
	// Exec executes an auction, distributing funds and finalizing the auction.
	Exec(ctx context.Context, in *MsgExecAuction, opts ...grpc.CallOption) (*MsgExecAuctionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewAuction(ctx context.Context, in *MsgNewAuction, opts ...grpc.CallOption) (*MsgNewAuctionResponse, error) {
	out := new(MsgNewAuctionResponse)
	err := c.cc.Invoke(ctx, "/fatal_fruit.auction.v1.Msg/NewAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartAuction(ctx context.Context, in *MsgStartAuction, opts ...grpc.CallOption) (*MsgStartAuctionResponse, error) {
	out := new(MsgStartAuctionResponse)
	err := c.cc.Invoke(ctx, "/fatal_fruit.auction.v1.Msg/StartAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewBid(ctx context.Context, in *MsgNewBid, opts ...grpc.CallOption) (*MsgNewBidResponse, error) {
	out := new(MsgNewBidResponse)
	err := c.cc.Invoke(ctx, "/fatal_fruit.auction.v1.Msg/NewBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Exec(ctx context.Context, in *MsgExecAuction, opts ...grpc.CallOption) (*MsgExecAuctionResponse, error) {
	out := new(MsgExecAuctionResponse)
	err := c.cc.Invoke(ctx, "/fatal_fruit.auction.v1.Msg/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// NewAuction creates a new auction.
	NewAuction(context.Context, *MsgNewAuction) (*MsgNewAuctionResponse, error)
	// StartAuction initializes the auction
	StartAuction(context.Context, *MsgStartAuction) (*MsgStartAuctionResponse, error)
	// NewBid places a new bid on an auction.
	NewBid(context.Context, *MsgNewBid) (*MsgNewBidResponse, error)
	// Exec executes an auction, distributing funds and finalizing the auction.
	Exec(context.Context, *MsgExecAuction) (*MsgExecAuctionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewAuction(ctx context.Context, req *MsgNewAuction) (*MsgNewAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAuction not implemented")
}
func (*UnimplementedMsgServer) StartAuction(ctx context.Context, req *MsgStartAuction) (*MsgStartAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartAuction not implemented")
}
func (*UnimplementedMsgServer) NewBid(ctx context.Context, req *MsgNewBid) (*MsgNewBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBid not implemented")
}
func (*UnimplementedMsgServer) Exec(ctx context.Context, req *MsgExecAuction) (*MsgExecAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewAuction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatal_fruit.auction.v1.Msg/NewAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewAuction(ctx, req.(*MsgNewAuction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartAuction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatal_fruit.auction.v1.Msg/StartAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartAuction(ctx, req.(*MsgStartAuction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewBid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatal_fruit.auction.v1.Msg/NewBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewBid(ctx, req.(*MsgNewBid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecAuction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatal_fruit.auction.v1.Msg/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Exec(ctx, req.(*MsgExecAuction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fatal_fruit.auction.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewAuction",
			Handler:    _Msg_NewAuction_Handler,
		},
		{
			MethodName: "StartAuction",
			Handler:    _Msg_StartAuction_Handler,
		},
		{
			MethodName: "NewBid",
			Handler:    _Msg_NewBid_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Msg_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fatal_fruit/auction/v1/tx.proto",
}

func (m *MsgNewAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionMetadata != nil {
		{
			size, err := m.AuctionMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AuctionType) > 0 {
		i -= len(m.AuctionType)
		copy(dAtA[i:], m.AuctionType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AuctionType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCancelAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCancelAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCancelAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCancelAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNewBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.BidAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AuctionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.AuctionType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.AuctionMetadata != nil {
		l = m.AuctionMetadata.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgStartAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgStartAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCancelAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AuctionId != 0 {
		n += 1 + sovTx(uint64(m.AuctionId))
	}
	return n
}

func (m *MsgCancelAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNewBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AuctionId != 0 {
		n += 1 + sovTx(uint64(m.AuctionId))
	}
	l = m.BidAmount.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AuctionId != 0 {
		n += 1 + sovTx(uint64(m.AuctionId))
	}
	return n
}

func (m *MsgExecAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AuctionMetadata == nil {
				m.AuctionMetadata = &types1.Any{}
			}
			if err := m.AuctionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCancelAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCancelAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCancelAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &types1.Any{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
