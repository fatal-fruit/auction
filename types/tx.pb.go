// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fatal_fruit/auction/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgNewAuction struct {
	Owner        string                                   `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	Deposit      github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=deposit,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"deposit"`
	ReservePrice types.Coin                               `protobuf:"bytes,3,opt,name=reserve_price,json=reservePrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reserve_price"`
	// expiration specifies an optional time when this allowance expires
	Duration    time.Duration `protobuf:"bytes,4,opt,name=duration,proto3,stdduration" json:"duration"`
	AuctionType string        `protobuf:"bytes,5,opt,name=auction_type,json=auctionType,proto3" json:"auction_type,omitempty"`
}

func (m *MsgNewAuction) Reset()         { *m = MsgNewAuction{} }
func (m *MsgNewAuction) String() string { return proto.CompactTextString(m) }
func (*MsgNewAuction) ProtoMessage()    {}
func (*MsgNewAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{0}
}
func (m *MsgNewAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewAuction.Merge(m, src)
}
func (m *MsgNewAuction) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewAuction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewAuction proto.InternalMessageInfo

func (m *MsgNewAuction) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgNewAuction) GetDeposit() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Deposit
	}
	return nil
}

func (m *MsgNewAuction) GetReservePrice() types.Coin {
	if m != nil {
		return m.ReservePrice
	}
	return types.Coin{}
}

func (m *MsgNewAuction) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MsgNewAuction) GetAuctionType() string {
	if m != nil {
		return m.AuctionType
	}
	return ""
}

type MsgNewAuctionResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgNewAuctionResponse) Reset()         { *m = MsgNewAuctionResponse{} }
func (m *MsgNewAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewAuctionResponse) ProtoMessage()    {}
func (*MsgNewAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{1}
}
func (m *MsgNewAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewAuctionResponse.Merge(m, src)
}
func (m *MsgNewAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewAuctionResponse proto.InternalMessageInfo

func (m *MsgNewAuctionResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgNewBid struct {
	Owner     string     `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
	AuctionId uint64     `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bid       types.Coin `protobuf:"bytes,3,opt,name=bid,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"bid"`
}

func (m *MsgNewBid) Reset()         { *m = MsgNewBid{} }
func (m *MsgNewBid) String() string { return proto.CompactTextString(m) }
func (*MsgNewBid) ProtoMessage()    {}
func (*MsgNewBid) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{2}
}
func (m *MsgNewBid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBid.Merge(m, src)
}
func (m *MsgNewBid) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBid) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBid.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBid proto.InternalMessageInfo

func (m *MsgNewBid) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *MsgNewBid) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *MsgNewBid) GetBid() types.Coin {
	if m != nil {
		return m.Bid
	}
	return types.Coin{}
}

type MsgNewBidResponse struct {
}

func (m *MsgNewBidResponse) Reset()         { *m = MsgNewBidResponse{} }
func (m *MsgNewBidResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNewBidResponse) ProtoMessage()    {}
func (*MsgNewBidResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{3}
}
func (m *MsgNewBidResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNewBidResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNewBidResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNewBidResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNewBidResponse.Merge(m, src)
}
func (m *MsgNewBidResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNewBidResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNewBidResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNewBidResponse proto.InternalMessageInfo

type MsgExecAuction struct {
	Sender    string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	AuctionId uint64 `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (m *MsgExecAuction) Reset()         { *m = MsgExecAuction{} }
func (m *MsgExecAuction) String() string { return proto.CompactTextString(m) }
func (*MsgExecAuction) ProtoMessage()    {}
func (*MsgExecAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{4}
}
func (m *MsgExecAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecAuction.Merge(m, src)
}
func (m *MsgExecAuction) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecAuction.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecAuction proto.InternalMessageInfo

func (m *MsgExecAuction) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgExecAuction) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

type MsgExecAuctionResponse struct {
}

func (m *MsgExecAuctionResponse) Reset()         { *m = MsgExecAuctionResponse{} }
func (m *MsgExecAuctionResponse) String() string { return proto.CompactTextString(m) }
func (*MsgExecAuctionResponse) ProtoMessage()    {}
func (*MsgExecAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_885159ca31442fc0, []int{5}
}
func (m *MsgExecAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgExecAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgExecAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgExecAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgExecAuctionResponse.Merge(m, src)
}
func (m *MsgExecAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgExecAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgExecAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgExecAuctionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgNewAuction)(nil), "fatal_fruit.auction.v1.MsgNewAuction")
	proto.RegisterType((*MsgNewAuctionResponse)(nil), "fatal_fruit.auction.v1.MsgNewAuctionResponse")
	proto.RegisterType((*MsgNewBid)(nil), "fatal_fruit.auction.v1.MsgNewBid")
	proto.RegisterType((*MsgNewBidResponse)(nil), "fatal_fruit.auction.v1.MsgNewBidResponse")
	proto.RegisterType((*MsgExecAuction)(nil), "fatal_fruit.auction.v1.MsgExecAuction")
	proto.RegisterType((*MsgExecAuctionResponse)(nil), "fatal_fruit.auction.v1.MsgExecAuctionResponse")
}

func init() { proto.RegisterFile("fatal_fruit/auction/v1/tx.proto", fileDescriptor_885159ca31442fc0) }

var fileDescriptor_885159ca31442fc0 = []byte{
	// 624 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x54, 0x3f, 0x6f, 0xd3, 0x40,
	0x14, 0x8f, 0x93, 0xb6, 0xd0, 0x4b, 0x52, 0xa9, 0xa6, 0x14, 0xd7, 0x12, 0x4e, 0x6a, 0xf1, 0x27,
	0x44, 0xca, 0x99, 0x94, 0xad, 0x03, 0x52, 0x4d, 0x41, 0x62, 0x08, 0x42, 0x01, 0x31, 0x30, 0x10,
	0xd9, 0xbe, 0xcb, 0x71, 0x22, 0xf1, 0x59, 0x3e, 0x27, 0x6d, 0xc4, 0x82, 0x18, 0x98, 0x19, 0x11,
	0x9f, 0xa0, 0x62, 0xca, 0xc0, 0xc4, 0x27, 0xe8, 0x58, 0x31, 0x21, 0x21, 0x51, 0x94, 0x0c, 0xf9,
	0x1a, 0xe8, 0xec, 0x73, 0x94, 0x48, 0xd0, 0x86, 0xa5, 0x4b, 0x62, 0x3f, 0xff, 0xde, 0x7b, 0xbf,
	0x3f, 0x67, 0x83, 0x52, 0xdb, 0x89, 0x9c, 0x4e, 0xab, 0x1d, 0xf6, 0x68, 0x64, 0x39, 0x3d, 0x2f,
	0xa2, 0xcc, 0xb7, 0xfa, 0x75, 0x2b, 0x3a, 0x84, 0x41, 0xc8, 0x22, 0xa6, 0x6e, 0xce, 0x00, 0xa0,
	0x04, 0xc0, 0x7e, 0x5d, 0xbf, 0xe6, 0x31, 0xde, 0x65, 0xdc, 0xea, 0x72, 0x22, 0xf0, 0x5d, 0x4e,
	0x92, 0x06, 0x7d, 0x83, 0x30, 0xc2, 0xe2, 0x4b, 0x4b, 0x5c, 0xc9, 0xaa, 0x21, 0xe1, 0xae, 0xc3,
	0xb1, 0xd5, 0xaf, 0xbb, 0x38, 0x72, 0xea, 0x96, 0xc7, 0xa8, 0x2f, 0x9f, 0xaf, 0x3b, 0x5d, 0xea,
	0x33, 0x2b, 0xfe, 0x95, 0x25, 0xf3, 0x5f, 0xd4, 0x06, 0x01, 0xe6, 0x12, 0xb3, 0x95, 0x8c, 0x6d,
	0x25, 0xfb, 0x92, 0x9b, 0x74, 0x23, 0x61, 0x8c, 0x74, 0xb0, 0x15, 0xdf, 0xb9, 0xbd, 0xb6, 0x85,
	0x7a, 0xa1, 0x13, 0xb3, 0x8f, 0x2b, 0xe6, 0xb7, 0x1c, 0x28, 0x36, 0x38, 0x79, 0x82, 0x0f, 0xf6,
	0x92, 0xd9, 0x2a, 0x04, 0xcb, 0xec, 0xc0, 0xc7, 0xa1, 0xa6, 0x94, 0x95, 0xca, 0xaa, 0xad, 0x7d,
	0xff, 0x5a, 0xdb, 0x90, 0x23, 0xf7, 0x10, 0x0a, 0x31, 0xe7, 0xcf, 0xa2, 0x90, 0xfa, 0xa4, 0x99,
	0xc0, 0xd4, 0xb7, 0xe0, 0x12, 0xc2, 0x01, 0xe3, 0x34, 0xd2, 0xb2, 0xe5, 0x5c, 0x25, 0xbf, 0xb3,
	0x05, 0x25, 0x5c, 0xa8, 0x84, 0x52, 0x25, 0x7c, 0xc0, 0xa8, 0x6f, 0x3f, 0x3a, 0xfe, 0x55, 0xca,
	0x7c, 0x39, 0x2d, 0x55, 0x08, 0x8d, 0x5e, 0xf7, 0x5c, 0xe8, 0xb1, 0xae, 0xa4, 0x2b, 0xff, 0x6a,
	0x1c, 0xbd, 0x91, 0xd2, 0x44, 0x03, 0xff, 0x3c, 0x19, 0x56, 0x0b, 0x1d, 0x4c, 0x1c, 0x6f, 0xd0,
	0x12, 0x3e, 0xf1, 0xa3, 0xc9, 0xb0, 0xaa, 0x34, 0xd3, 0x8d, 0xea, 0x07, 0x05, 0x14, 0x43, 0xcc,
	0x71, 0xd8, 0xc7, 0xad, 0x20, 0xa4, 0x1e, 0xd6, 0x72, 0x65, 0xe5, 0x62, 0x38, 0x14, 0xe4, 0xde,
	0xa7, 0x62, 0xad, 0xba, 0x0f, 0x2e, 0xa7, 0xce, 0x6a, 0x4b, 0x92, 0x42, 0x62, 0x3d, 0x4c, 0xad,
	0x87, 0xfb, 0x12, 0x60, 0x17, 0x05, 0x85, 0x4f, 0xa7, 0x25, 0x25, 0x99, 0x34, 0xed, 0x54, 0xb7,
	0x41, 0x41, 0x46, 0xdc, 0x12, 0x04, 0xb4, 0x65, 0x11, 0x41, 0x33, 0x2f, 0x6b, 0xcf, 0x07, 0x01,
	0xde, 0x05, 0xef, 0x27, 0xc3, 0x6a, 0x62, 0xbd, 0x79, 0x1b, 0x5c, 0x9d, 0xcb, 0xae, 0x89, 0x79,
	0xc0, 0x7c, 0x8e, 0xd5, 0x35, 0x90, 0xa5, 0x28, 0x0e, 0x70, 0xa9, 0x99, 0xa5, 0xc8, 0xfc, 0xa9,
	0x80, 0xd5, 0x04, 0x69, 0x53, 0xf4, 0xdf, 0x09, 0x5f, 0x07, 0x20, 0x65, 0x45, 0x91, 0x96, 0x8d,
	0xa7, 0xae, 0xca, 0xca, 0x63, 0xa4, 0x72, 0x90, 0x73, 0x29, 0xba, 0x38, 0xe3, 0xc5, 0xb6, 0x39,
	0x1b, 0xae, 0x80, 0xf5, 0xa9, 0xb8, 0xd4, 0x02, 0xd3, 0x07, 0x6b, 0x0d, 0x4e, 0x1e, 0x1e, 0x62,
	0x2f, 0x3d, 0xd8, 0x77, 0xc1, 0x0a, 0xc7, 0x3e, 0x5a, 0x40, 0xb7, 0xc4, 0x9d, 0x23, 0x7c, 0x37,
	0x2f, 0x38, 0x48, 0xac, 0xa9, 0x81, 0xcd, 0xf9, 0x7d, 0x29, 0x93, 0x9d, 0xa3, 0x2c, 0xc8, 0x35,
	0x38, 0x51, 0x5d, 0x00, 0x66, 0x5e, 0xb3, 0x9b, 0xf0, 0xef, 0x9f, 0x14, 0x38, 0x97, 0xa8, 0x5e,
	0x5b, 0x08, 0x36, 0x0d, 0xfe, 0x05, 0x58, 0x91, 0x21, 0x6f, 0x9f, 0xdd, 0x68, 0x53, 0xa4, 0xdf,
	0x39, 0x17, 0x32, 0x9d, 0xfb, 0x0a, 0x2c, 0x09, 0x69, 0xea, 0xad, 0x33, 0x5a, 0x66, 0xb4, 0xeb,
	0x70, 0x31, 0x5c, 0x3a, 0x5f, 0x5f, 0x7e, 0x27, 0xa2, 0xb5, 0xef, 0x1f, 0x8f, 0x0c, 0xe5, 0x64,
	0x64, 0x28, 0xbf, 0x47, 0x86, 0xf2, 0x71, 0x6c, 0x64, 0x4e, 0xc6, 0x46, 0xe6, 0xc7, 0xd8, 0xc8,
	0xbc, 0xbc, 0x31, 0x73, 0x68, 0xe2, 0xd1, 0xb5, 0xf9, 0x2f, 0x62, 0x7c, 0x6c, 0xdc, 0x95, 0xf8,
	0x5d, 0xbb, 0xf7, 0x27, 0x00, 0x00, 0xff, 0xff, 0x3e, 0xa7, 0x0e, 0x45, 0xd0, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	NewAuction(ctx context.Context, in *MsgNewAuction, opts ...grpc.CallOption) (*MsgNewAuctionResponse, error)
	NewBid(ctx context.Context, in *MsgNewBid, opts ...grpc.CallOption) (*MsgNewBidResponse, error)
	Exec(ctx context.Context, in *MsgExecAuction, opts ...grpc.CallOption) (*MsgExecAuctionResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) NewAuction(ctx context.Context, in *MsgNewAuction, opts ...grpc.CallOption) (*MsgNewAuctionResponse, error) {
	out := new(MsgNewAuctionResponse)
	err := c.cc.Invoke(ctx, "/fatal_fruit.auction.v1.Msg/NewAuction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NewBid(ctx context.Context, in *MsgNewBid, opts ...grpc.CallOption) (*MsgNewBidResponse, error) {
	out := new(MsgNewBidResponse)
	err := c.cc.Invoke(ctx, "/fatal_fruit.auction.v1.Msg/NewBid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Exec(ctx context.Context, in *MsgExecAuction, opts ...grpc.CallOption) (*MsgExecAuctionResponse, error) {
	out := new(MsgExecAuctionResponse)
	err := c.cc.Invoke(ctx, "/fatal_fruit.auction.v1.Msg/Exec", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	NewAuction(context.Context, *MsgNewAuction) (*MsgNewAuctionResponse, error)
	NewBid(context.Context, *MsgNewBid) (*MsgNewBidResponse, error)
	Exec(context.Context, *MsgExecAuction) (*MsgExecAuctionResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) NewAuction(ctx context.Context, req *MsgNewAuction) (*MsgNewAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewAuction not implemented")
}
func (*UnimplementedMsgServer) NewBid(ctx context.Context, req *MsgNewBid) (*MsgNewBidResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewBid not implemented")
}
func (*UnimplementedMsgServer) Exec(ctx context.Context, req *MsgExecAuction) (*MsgExecAuctionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Exec not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_NewAuction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewAuction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewAuction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatal_fruit.auction.v1.Msg/NewAuction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewAuction(ctx, req.(*MsgNewAuction))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NewBid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNewBid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NewBid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatal_fruit.auction.v1.Msg/NewBid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NewBid(ctx, req.(*MsgNewBid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Exec_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgExecAuction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Exec(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fatal_fruit.auction.v1.Msg/Exec",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Exec(ctx, req.(*MsgExecAuction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fatal_fruit.auction.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewAuction",
			Handler:    _Msg_NewAuction_Handler,
		},
		{
			MethodName: "NewBid",
			Handler:    _Msg_NewBid_Handler,
		},
		{
			MethodName: "Exec",
			Handler:    _Msg_Exec_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fatal_fruit/auction/v1/tx.proto",
}

func (m *MsgNewAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuctionType) > 0 {
		i -= len(m.AuctionType)
		copy(dAtA[i:], m.AuctionType)
		i = encodeVarintTx(dAtA, i, uint64(len(m.AuctionType)))
		i--
		dAtA[i] = 0x2a
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.ReservePrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Deposit) > 0 {
		for iNdEx := len(m.Deposit) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Deposit[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewBid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.AuctionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNewBidResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNewBidResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNewBidResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgExecAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AuctionId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgExecAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgExecAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgExecAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgNewAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Deposit) > 0 {
		for _, e := range m.Deposit {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = m.ReservePrice.Size()
	n += 1 + l + sovTx(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovTx(uint64(l))
	l = len(m.AuctionType)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgNewAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgNewBid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AuctionId != 0 {
		n += 1 + sovTx(uint64(m.AuctionId))
	}
	l = m.Bid.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgNewBidResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgExecAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AuctionId != 0 {
		n += 1 + sovTx(uint64(m.AuctionId))
	}
	return n
}

func (m *MsgExecAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgNewAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deposit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deposit = append(m.Deposit, types.Coin{})
			if err := m.Deposit[len(m.Deposit)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservePrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReservePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewBid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNewBidResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNewBidResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNewBidResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgExecAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgExecAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgExecAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
