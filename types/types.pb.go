// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fatal_fruit/auction/v1/types.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReserveAuctionMetadata struct {
	// duration specifies the time duration of the auction.
	Duration time.Duration `protobuf:"bytes,2,opt,name=duration,proto3,stdduration" json:"duration"`
	// start_time and end_time are calculated from the contract duration
	StartTime time.Time `protobuf:"bytes,7,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime   time.Time `protobuf:"bytes,8,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	// reserve_price is the minimum price for the auction.
	ReservePrice types.Coin      `protobuf:"bytes,3,opt,name=reserve_price,json=reservePrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"reserve_price"`
	Bids         []*Bid          `protobuf:"bytes,9,rep,name=bids,proto3" json:"bids,omitempty"`
	LastPrice    types.Coin      `protobuf:"bytes,10,opt,name=last_price,json=lastPrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"last_price"`
	Strategy     *SettleStrategy `protobuf:"bytes,11,opt,name=strategy,proto3" json:"strategy,omitempty"`
}

func (m *ReserveAuctionMetadata) Reset()         { *m = ReserveAuctionMetadata{} }
func (m *ReserveAuctionMetadata) String() string { return proto.CompactTextString(m) }
func (*ReserveAuctionMetadata) ProtoMessage()    {}
func (*ReserveAuctionMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feca4e902ee96b9, []int{0}
}
func (m *ReserveAuctionMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveAuctionMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveAuctionMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveAuctionMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveAuctionMetadata.Merge(m, src)
}
func (m *ReserveAuctionMetadata) XXX_Size() int {
	return m.Size()
}
func (m *ReserveAuctionMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveAuctionMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveAuctionMetadata proto.InternalMessageInfo

func (m *ReserveAuctionMetadata) GetDuration() time.Duration {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *ReserveAuctionMetadata) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *ReserveAuctionMetadata) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *ReserveAuctionMetadata) GetReservePrice() types.Coin {
	if m != nil {
		return m.ReservePrice
	}
	return types.Coin{}
}

func (m *ReserveAuctionMetadata) GetBids() []*Bid {
	if m != nil {
		return m.Bids
	}
	return nil
}

func (m *ReserveAuctionMetadata) GetLastPrice() types.Coin {
	if m != nil {
		return m.LastPrice
	}
	return types.Coin{}
}

func (m *ReserveAuctionMetadata) GetStrategy() *SettleStrategy {
	if m != nil {
		return m.Strategy
	}
	return nil
}

type ReserveAuction struct {
	Id          uint64                  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Status      string                  `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
	Owner       string                  `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	AuctionType string                  `protobuf:"bytes,4,opt,name=auction_type,json=auctionType,proto3" json:"auction_type,omitempty"`
	Metadata    *ReserveAuctionMetadata `protobuf:"bytes,5,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (m *ReserveAuction) Reset()         { *m = ReserveAuction{} }
func (m *ReserveAuction) String() string { return proto.CompactTextString(m) }
func (*ReserveAuction) ProtoMessage()    {}
func (*ReserveAuction) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feca4e902ee96b9, []int{1}
}
func (m *ReserveAuction) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ReserveAuction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ReserveAuction.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ReserveAuction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReserveAuction.Merge(m, src)
}
func (m *ReserveAuction) XXX_Size() int {
	return m.Size()
}
func (m *ReserveAuction) XXX_DiscardUnknown() {
	xxx_messageInfo_ReserveAuction.DiscardUnknown(m)
}

var xxx_messageInfo_ReserveAuction proto.InternalMessageInfo

func (m *ReserveAuction) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ReserveAuction) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ReserveAuction) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *ReserveAuction) GetAuctionType() string {
	if m != nil {
		return m.AuctionType
	}
	return ""
}

func (m *ReserveAuction) GetMetadata() *ReserveAuctionMetadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type OwnerAuctions struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *OwnerAuctions) Reset()         { *m = OwnerAuctions{} }
func (m *OwnerAuctions) String() string { return proto.CompactTextString(m) }
func (*OwnerAuctions) ProtoMessage()    {}
func (*OwnerAuctions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feca4e902ee96b9, []int{2}
}
func (m *OwnerAuctions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnerAuctions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnerAuctions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnerAuctions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnerAuctions.Merge(m, src)
}
func (m *OwnerAuctions) XXX_Size() int {
	return m.Size()
}
func (m *OwnerAuctions) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnerAuctions.DiscardUnknown(m)
}

var xxx_messageInfo_OwnerAuctions proto.InternalMessageInfo

func (m *OwnerAuctions) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type AuctionIds struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *AuctionIds) Reset()         { *m = AuctionIds{} }
func (m *AuctionIds) String() string { return proto.CompactTextString(m) }
func (*AuctionIds) ProtoMessage()    {}
func (*AuctionIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feca4e902ee96b9, []int{3}
}
func (m *AuctionIds) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AuctionIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AuctionIds.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AuctionIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AuctionIds.Merge(m, src)
}
func (m *AuctionIds) XXX_Size() int {
	return m.Size()
}
func (m *AuctionIds) XXX_DiscardUnknown() {
	xxx_messageInfo_AuctionIds.DiscardUnknown(m)
}

var xxx_messageInfo_AuctionIds proto.InternalMessageInfo

func (m *AuctionIds) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type Bid struct {
	AuctionId uint64     `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Bidder    string     `protobuf:"bytes,2,opt,name=bidder,proto3" json:"bidder,omitempty"`
	BidPrice  types.Coin `protobuf:"bytes,3,opt,name=bid_price,json=bidPrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"bid_price"`
	Timestamp time.Time  `protobuf:"bytes,4,opt,name=timestamp,proto3,stdtime" json:"timestamp"`
}

func (m *Bid) Reset()         { *m = Bid{} }
func (m *Bid) String() string { return proto.CompactTextString(m) }
func (*Bid) ProtoMessage()    {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feca4e902ee96b9, []int{4}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetAuctionId() uint64 {
	if m != nil {
		return m.AuctionId
	}
	return 0
}

func (m *Bid) GetBidder() string {
	if m != nil {
		return m.Bidder
	}
	return ""
}

func (m *Bid) GetBidPrice() types.Coin {
	if m != nil {
		return m.BidPrice
	}
	return types.Coin{}
}

func (m *Bid) GetTimestamp() time.Time {
	if m != nil {
		return m.Timestamp
	}
	return time.Time{}
}

type SettleStrategy struct {
	StrategyType string `protobuf:"bytes,1,opt,name=strategy_type,json=strategyType,proto3" json:"strategy_type,omitempty"`
	// id of escrow contract for auction
	EscrowContractId      uint64 `protobuf:"varint,2,opt,name=escrow_contract_id,json=escrowContractId,proto3" json:"escrow_contract_id,omitempty"`
	EscrowContractAddress string `protobuf:"bytes,3,opt,name=escrow_contract_address,json=escrowContractAddress,proto3" json:"escrow_contract_address,omitempty"`
}

func (m *SettleStrategy) Reset()         { *m = SettleStrategy{} }
func (m *SettleStrategy) String() string { return proto.CompactTextString(m) }
func (*SettleStrategy) ProtoMessage()    {}
func (*SettleStrategy) Descriptor() ([]byte, []int) {
	return fileDescriptor_4feca4e902ee96b9, []int{5}
}
func (m *SettleStrategy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SettleStrategy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SettleStrategy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SettleStrategy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SettleStrategy.Merge(m, src)
}
func (m *SettleStrategy) XXX_Size() int {
	return m.Size()
}
func (m *SettleStrategy) XXX_DiscardUnknown() {
	xxx_messageInfo_SettleStrategy.DiscardUnknown(m)
}

var xxx_messageInfo_SettleStrategy proto.InternalMessageInfo

func (m *SettleStrategy) GetStrategyType() string {
	if m != nil {
		return m.StrategyType
	}
	return ""
}

func (m *SettleStrategy) GetEscrowContractId() uint64 {
	if m != nil {
		return m.EscrowContractId
	}
	return 0
}

func (m *SettleStrategy) GetEscrowContractAddress() string {
	if m != nil {
		return m.EscrowContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*ReserveAuctionMetadata)(nil), "fatal_fruit.auction.v1.ReserveAuctionMetadata")
	proto.RegisterType((*ReserveAuction)(nil), "fatal_fruit.auction.v1.ReserveAuction")
	proto.RegisterType((*OwnerAuctions)(nil), "fatal_fruit.auction.v1.OwnerAuctions")
	proto.RegisterType((*AuctionIds)(nil), "fatal_fruit.auction.v1.AuctionIds")
	proto.RegisterType((*Bid)(nil), "fatal_fruit.auction.v1.Bid")
	proto.RegisterType((*SettleStrategy)(nil), "fatal_fruit.auction.v1.SettleStrategy")
}

func init() {
	proto.RegisterFile("fatal_fruit/auction/v1/types.proto", fileDescriptor_4feca4e902ee96b9)
}

var fileDescriptor_4feca4e902ee96b9 = []byte{
	// 780 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xbf, 0x6f, 0xf3, 0x44,
	0x18, 0x8e, 0x93, 0xb4, 0x5f, 0x7c, 0x49, 0xaa, 0x8f, 0xd3, 0x47, 0x71, 0x82, 0x70, 0xf2, 0x05,
	0x54, 0x45, 0x15, 0xb1, 0x49, 0xd9, 0x3a, 0x20, 0x9a, 0x56, 0x40, 0x91, 0x10, 0x95, 0xdb, 0x89,
	0x25, 0x3a, 0xfb, 0xae, 0xe6, 0x44, 0xe2, 0x8b, 0x7c, 0x97, 0x54, 0x59, 0x10, 0x13, 0x03, 0x53,
	0x47, 0x60, 0x61, 0x45, 0x4c, 0x1d, 0xca, 0xc2, 0x5f, 0x50, 0x75, 0xaa, 0x98, 0x98, 0x28, 0x6a,
	0x87, 0xfe, 0x1b, 0xe8, 0x7e, 0x38, 0x4a, 0x42, 0x5b, 0xd4, 0xa5, 0x4b, 0xeb, 0xbb, 0xf7, 0x79,
	0x9f, 0x7b, 0xee, 0x79, 0x1f, 0x3b, 0xa0, 0x75, 0x8c, 0x04, 0x1a, 0xf4, 0x8f, 0xd3, 0x31, 0x15,
	0x3e, 0x1a, 0x47, 0x82, 0xb2, 0xc4, 0x9f, 0x74, 0x7d, 0x31, 0x1d, 0x11, 0xee, 0x8d, 0x52, 0x26,
	0x18, 0x5c, 0x9f, 0xc3, 0x78, 0x06, 0xe3, 0x4d, 0xba, 0xf5, 0x5a, 0xc4, 0xf8, 0x90, 0xf1, 0xbe,
	0x42, 0xf9, 0x7a, 0xa1, 0x5b, 0xea, 0xaf, 0x62, 0x16, 0x33, 0xbd, 0x2f, 0x9f, 0xcc, 0xae, 0xab,
	0x31, 0x7e, 0x88, 0x38, 0xf1, 0x27, 0xdd, 0x90, 0x08, 0xd4, 0xf5, 0x23, 0x46, 0x13, 0x53, 0x7f,
	0x03, 0x0d, 0x69, 0xc2, 0x7c, 0xf5, 0xd7, 0x6c, 0x35, 0x62, 0xc6, 0xe2, 0x01, 0xf1, 0xd5, 0x2a,
	0x1c, 0x1f, 0xfb, 0x82, 0x0e, 0x09, 0x17, 0x68, 0x38, 0xca, 0x38, 0x97, 0x01, 0x78, 0x9c, 0x22,
	0xa5, 0x50, 0xd7, 0x6b, 0xcb, 0x75, 0x94, 0x4c, 0x75, 0xa9, 0xf5, 0xc7, 0x0a, 0x58, 0x0f, 0x08,
	0x27, 0xe9, 0x84, 0xec, 0xe8, 0x5b, 0x7d, 0x41, 0x04, 0xc2, 0x48, 0x20, 0xb8, 0x07, 0x4a, 0x19,
	0x8f, 0x93, 0x6f, 0x5a, 0xed, 0xf2, 0x56, 0xcd, 0xd3, 0x44, 0x5e, 0x46, 0xe4, 0xed, 0x19, 0x40,
	0xaf, 0x7a, 0xf1, 0x77, 0x23, 0xf7, 0xe3, 0x75, 0xc3, 0xfa, 0xf5, 0xee, 0x6c, 0xd3, 0x0a, 0x66,
	0x9d, 0xf0, 0x33, 0x00, 0xb8, 0x40, 0xa9, 0xe8, 0x4b, 0xd1, 0xce, 0x0b, 0xc5, 0x53, 0xff, 0x0f,
	0xcf, 0x51, 0x76, 0x23, 0x4d, 0x74, 0x3a, 0x23, 0xb2, 0x55, 0xb3, 0x2c, 0x4b, 0x3d, 0x24, 0xc1,
	0x9a, 0xa7, 0xf4, 0x54, 0x9e, 0x17, 0x24, 0xc1, 0x8a, 0xe5, 0x7b, 0x0b, 0x54, 0x53, 0x7d, 0xe1,
	0xfe, 0x28, 0xa5, 0x11, 0x71, 0x0a, 0xe6, 0x6e, 0x66, 0x78, 0x72, 0x30, 0x9e, 0x19, 0x8c, 0xb7,
	0xcb, 0x68, 0xd2, 0xfb, 0x44, 0x52, 0xfd, 0x76, 0xdd, 0x68, 0xc7, 0x54, 0x7c, 0x3d, 0x0e, 0xbd,
	0x88, 0x0d, 0xcd, 0xa4, 0xcd, 0xbf, 0x0e, 0xc7, 0xdf, 0x98, 0xb4, 0xc8, 0x06, 0xfe, 0xf3, 0xdd,
	0xd9, 0x66, 0x65, 0x40, 0x62, 0x14, 0x4d, 0xfb, 0x72, 0xb4, 0x5c, 0x6b, 0xa8, 0x98, 0x73, 0x0f,
	0xe4, 0xb1, 0xd0, 0x07, 0xc5, 0x90, 0x62, 0xee, 0xd8, 0xcd, 0x42, 0xbb, 0xbc, 0xf5, 0xb6, 0x77,
	0x7f, 0xc0, 0xbc, 0x1e, 0xc5, 0x81, 0x02, 0xc2, 0xef, 0x2c, 0x00, 0x06, 0x88, 0x0b, 0x23, 0x1b,
	0x3c, 0x97, 0x6c, 0x5b, 0x1e, 0xaa, 0x35, 0xf7, 0x40, 0x89, 0x8b, 0x14, 0x09, 0x12, 0x4f, 0x9d,
	0xb2, 0x3a, 0x7f, 0xe3, 0x21, 0xdd, 0x87, 0x44, 0x88, 0x01, 0x39, 0x34, 0xe8, 0x60, 0xd6, 0xb7,
	0xbd, 0x7f, 0x79, 0xde, 0xd9, 0x78, 0xa0, 0x69, 0x29, 0x82, 0x3f, 0xdc, 0x9d, 0x6d, 0xd6, 0xe7,
	0xb4, 0x2e, 0x95, 0x5b, 0x3f, 0xe5, 0xc1, 0xda, 0x62, 0x78, 0xe1, 0x1a, 0xc8, 0x53, 0xec, 0x58,
	0x4d, 0xab, 0x5d, 0x0c, 0xf2, 0x14, 0xc3, 0x75, 0xb0, 0xca, 0x05, 0x12, 0x63, 0xae, 0x22, 0x6c,
	0x07, 0x66, 0x05, 0x3d, 0xb0, 0xc2, 0x4e, 0x12, 0x92, 0xaa, 0xe9, 0xdb, 0x3d, 0xe7, 0xcf, 0xf3,
	0xce, 0x2b, 0xe3, 0xe4, 0x0e, 0xc6, 0x29, 0xe1, 0xfc, 0x50, 0xa4, 0x34, 0x89, 0x03, 0x0d, 0x83,
	0xaf, 0x41, 0xc5, 0xe8, 0xec, 0x4b, 0xc7, 0x9c, 0xa2, 0x62, 0x2b, 0x9b, 0xbd, 0xa3, 0xe9, 0x88,
	0xc0, 0xcf, 0x41, 0x69, 0x68, 0x94, 0x39, 0x2b, 0xca, 0x1c, 0xef, 0x21, 0x73, 0xee, 0x7f, 0xe3,
	0x82, 0x59, 0xff, 0xf6, 0xc7, 0x97, 0xe7, 0x1d, 0xf7, 0x71, 0x93, 0xa4, 0x39, 0xb5, 0x39, 0x73,
	0x16, 0x39, 0x5b, 0xaf, 0x41, 0xf5, 0x4b, 0xa9, 0xdc, 0xac, 0x39, 0x7c, 0x09, 0x0a, 0x32, 0x6e,
	0x56, 0xb3, 0xd0, 0x2e, 0x06, 0xf2, 0xb1, 0xe5, 0x02, 0x60, 0xaa, 0xfb, 0xf8, 0xbe, 0xfa, 0x2f,
	0x79, 0x50, 0xe8, 0x51, 0x0c, 0xdf, 0x01, 0x20, 0xbb, 0xfb, 0xcc, 0x5b, 0x1b, 0x65, 0x9d, 0xf0,
	0x03, 0xb0, 0x1a, 0x52, 0x8c, 0x49, 0xaa, 0x2d, 0x7e, 0xc4, 0x4b, 0x83, 0x83, 0xdf, 0x02, 0x3b,
	0xa4, 0xf8, 0xb9, 0x5f, 0xbf, 0x52, 0x48, 0xb1, 0x8e, 0xf1, 0xa7, 0xc0, 0x9e, 0x7d, 0x42, 0xd5,
	0x24, 0x9f, 0xf6, 0x49, 0x9a, 0xf5, 0xb6, 0x7e, 0xb7, 0xc0, 0xda, 0x62, 0xd0, 0xe1, 0xbb, 0xa0,
	0x9a, 0x45, 0x5d, 0x27, 0xc5, 0x52, 0x49, 0xa9, 0x64, 0x9b, 0x2a, 0x2a, 0xef, 0x03, 0x48, 0x78,
	0x94, 0xb2, 0x93, 0x7e, 0xc4, 0x12, 0x91, 0xa2, 0x48, 0x48, 0x67, 0xf3, 0xca, 0xd9, 0x97, 0xba,
	0xb2, 0x6b, 0x0a, 0xfb, 0x18, 0x1e, 0x80, 0xb7, 0x96, 0xd1, 0x48, 0xfb, 0xfa, 0xbf, 0xe9, 0x7d,
	0x73, 0x91, 0xcc, 0x14, 0x7b, 0x1f, 0x5d, 0xdc, 0xb8, 0xd6, 0xd5, 0x8d, 0x6b, 0xfd, 0x73, 0xe3,
	0x5a, 0xa7, 0xb7, 0x6e, 0xee, 0xea, 0xd6, 0xcd, 0xfd, 0x75, 0xeb, 0xe6, 0xbe, 0x7a, 0x6f, 0xce,
	0x64, 0x95, 0xbf, 0xce, 0xe2, 0xcf, 0xa2, 0xb2, 0x39, 0x5c, 0x55, 0x2e, 0x7d, 0xf8, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x59, 0xeb, 0x87, 0xc8, 0x3a, 0x07, 0x00, 0x00,
}

func (m *ReserveAuctionMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveAuctionMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveAuctionMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Strategy != nil {
		{
			size, err := m.Strategy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	{
		size, err := m.LastPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	if len(m.Bids) > 0 {
		for iNdEx := len(m.Bids) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Bids[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x4a
		}
	}
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintTypes(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0x42
	n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime):])
	if err4 != nil {
		return 0, err4
	}
	i -= n4
	i = encodeVarintTypes(dAtA, i, uint64(n4))
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.ReservePrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	n6, err6 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.Duration, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration):])
	if err6 != nil {
		return 0, err6
	}
	i -= n6
	i = encodeVarintTypes(dAtA, i, uint64(n6))
	i--
	dAtA[i] = 0x12
	return len(dAtA) - i, nil
}

func (m *ReserveAuction) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReserveAuction) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ReserveAuction) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metadata != nil {
		{
			size, err := m.Metadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AuctionType) > 0 {
		i -= len(m.AuctionType)
		copy(dAtA[i:], m.AuctionType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.AuctionType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *OwnerAuctions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnerAuctions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnerAuctions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA9 := make([]byte, len(m.Ids)*10)
		var j8 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintTypes(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AuctionIds) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AuctionIds) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AuctionIds) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA11 := make([]byte, len(m.Ids)*10)
		var j10 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA11[j10] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j10++
			}
			dAtA11[j10] = uint8(num)
			j10++
		}
		i -= j10
		copy(dAtA[i:], dAtA11[:j10])
		i = encodeVarintTypes(dAtA, i, uint64(j10))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n12, err12 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.Timestamp, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp):])
	if err12 != nil {
		return 0, err12
	}
	i -= n12
	i = encodeVarintTypes(dAtA, i, uint64(n12))
	i--
	dAtA[i] = 0x22
	{
		size, err := m.BidPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTypes(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Bidder) > 0 {
		i -= len(m.Bidder)
		copy(dAtA[i:], m.Bidder)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Bidder)))
		i--
		dAtA[i] = 0x12
	}
	if m.AuctionId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.AuctionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SettleStrategy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SettleStrategy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SettleStrategy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EscrowContractAddress) > 0 {
		i -= len(m.EscrowContractAddress)
		copy(dAtA[i:], m.EscrowContractAddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EscrowContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if m.EscrowContractId != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.EscrowContractId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StrategyType) > 0 {
		i -= len(m.StrategyType)
		copy(dAtA[i:], m.StrategyType)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.StrategyType)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ReserveAuctionMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.Duration)
	n += 1 + l + sovTypes(uint64(l))
	l = m.ReservePrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovTypes(uint64(l))
	if len(m.Bids) > 0 {
		for _, e := range m.Bids {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = m.LastPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	if m.Strategy != nil {
		l = m.Strategy.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *ReserveAuction) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTypes(uint64(m.Id))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.AuctionType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Metadata != nil {
		l = m.Metadata.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *OwnerAuctions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *AuctionIds) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovTypes(uint64(e))
		}
		n += 1 + sovTypes(uint64(l)) + l
	}
	return n
}

func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AuctionId != 0 {
		n += 1 + sovTypes(uint64(m.AuctionId))
	}
	l = len(m.Bidder)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = m.BidPrice.Size()
	n += 1 + l + sovTypes(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.Timestamp)
	n += 1 + l + sovTypes(uint64(l))
	return n
}

func (m *SettleStrategy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StrategyType)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.EscrowContractId != 0 {
		n += 1 + sovTypes(uint64(m.EscrowContractId))
	}
	l = len(m.EscrowContractAddress)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ReserveAuctionMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveAuctionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveAuctionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.Duration, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservePrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ReservePrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bids = append(m.Bids, &Bid{})
			if err := m.Bids[len(m.Bids)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Strategy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Strategy == nil {
				m.Strategy = &SettleStrategy{}
			}
			if err := m.Strategy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReserveAuction) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReserveAuction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReserveAuction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuctionType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &ReserveAuctionMetadata{}
			}
			if err := m.Metadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnerAuctions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnerAuctions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnerAuctions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AuctionIds) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AuctionIds: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AuctionIds: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTypes
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTypes
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuctionId", wireType)
			}
			m.AuctionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuctionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bidder", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Bidder = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BidPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.Timestamp, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SettleStrategy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SettleStrategy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SettleStrategy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StrategyType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowContractId", wireType)
			}
			m.EscrowContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EscrowContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EscrowContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EscrowContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
